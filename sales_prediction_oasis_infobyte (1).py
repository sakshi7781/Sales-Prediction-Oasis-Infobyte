# -*- coding: utf-8 -*-
"""Sales Prediction- Oasis Infobyte.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuZ5pgEf5fCNwp25RfjZeA8ysNCrHqZH

**Sakshi Kharat**

**Oasis Infobyte (Data Science) - Task-5**

**Sales Prediction**

**Importing Libraries**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

from google.colab import files


uploaded = files.upload()

df = pd.read_csv('Advertising.csv')

df

df.columns

"""**There are total 5 columns in the Dataset**"""

df.info

"""**There are 200 Rows and 4 Columns**"""

df.shape

df.head(2)

"""**Displaying the first 2 entries of the dataset**"""

df.iloc[1]

df.describe()

"""**Preprocessing the Data**

checking the null values
"""

df.isnull()

df.isnull().sum()

"""**There are no null values in the datset**"""

df.describe

df.duplicated().sum()

"""**Data Visualization**"""

plt.scatter(df['TV'], df['Sales'])
plt.title("Sales Vs TV")
plt.xlabel('TV')
plt.ylabel('Sales')

"""**The horizontal axis represents the TV advertising expenditure, measured in monetary units, while the vertical axis signifies the sales figures.
The graph shows a positive trend, indicating that increased investment in television advertising is often associated with higher sales.**
"""

plt.scatter(x=df['Newspaper'], y=df['Sales'])
plt.title("Newspaper vs Sales")
plt.xlabel("Newspaper")
plt.ylabel("Sales")

"""**The horizontal axis represents the Newspaper advertising expenditure, measured in monetary units, while the vertical axis signifies the sales figures The graph reveals the impact of newspaper advertising on sales performance. The expenditure on newspaper advertising increases along the horizontal axis, the sales figures, indicated on the vertical axis, exhibit varying patterns**"""

plt.figure(figsize=(4,4))
sns.scatterplot(data=df,x=df['Radio'],y=df['Sales'])
plt.show()

x=df.drop('Sales',axis=1)

x

y=df['Sales']

y

"""**Importing train_test_split to train and test the dataset**"""

from sklearn.linear_model import LinearRegression
import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=42)

x_train.shape

"""**x_train shape of (160, 3) it means there are 160 training samples, and each sample has 4 features or input variables**"""

x_test.shape

"""**x_test has a shape (40,3) it means that there are 40 test samples, and each samples has 4 features or input variables**

**Creating a Model**
"""

model = LinearRegression()

"""**Fit the model into the training data**"""

model.fit(x_train, y_train)

"""**Make predictions on the test data**"""

y_pred=model.predict(x_test)

y_pred

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

import numpy as np

"""**Evaluate the model for its accuracy**

**R-squared**
"""

r_squared =r2_score(y_test, y_pred)

print("R-Squared", r_squared)

y_pred = model.predict([[8.6, 2.1, 1]])

print(*y_pred)

"""**Mean Absolute Error**"""

from sklearn import metrics

y_pred = model.predict(x_test)

mae = mean_absolute_error(y_test, y_pred)

print("MAE", mae)

y_pred = model.predict([[8.6, 2.1, 1]])

print(*y_pred)

"""**Root Mean Square Error**"""

y_pred = model.predict(x_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("RMSE", rmse)

y_pred = model.predict([[8.6, 2.1, 1]])

print(*y_pred)

"""**Decision Tree Regressor**"""

from sklearn.linear_model import LinearRegression

from sklearn.tree import DecisionTreeRegressor

model = DecisionTreeRegressor()

model.fit(x_train, y_train)

y_pred = model.predict(x_test)

mse = mean_squared_error(y_test, y_pred)

print("MSE", mse)

"""**Using Linear Regression**

"""

model_lr = LinearRegression()

model_lr.fit(x_train, y_train)

y_pred_lr = model_lr.predict(x_test)

mse_lr = mean_squared_error(y_test, y_pred_lr)

print('Linear Regression MSE:', mse_lr)

"""**Using Random Forest Regressor**"""

from sklearn.ensemble import RandomForestRegressor

model_rf = RandomForestRegressor(n_estimators=100)

model_rf.fit(x_train, y_train)

y_pred_rf = model_rf.predict(x_test)

mse_rf = mean_squared_error(y_test, y_pred_rf)

print('Random Forest MSE:', mse_rf)

"""**All the three algorithms**"""

print('Linear Regression R^2:', model.score(x_test, y_test))
print('Decision Tree R^2:', model.score(x_test, y_test))
print('Random Forest R^2:', model.score(x_test, y_test))

"""**End of the Code**"""

